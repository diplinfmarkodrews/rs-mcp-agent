package com.example.reportserver;

import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.example.reportserver.bridge.ParameterDefinition;
import com.example.reportserver.bridge.ReportResult;
import com.example.reportserver.bridge.ReportServerInterface;
import com.example.reportserver.bridge.ReportTemplate;

/**
 * A mock implementation of the ReportServer for testing
 */
public class MockReportServer extends UnicastRemoteObject implements ReportServerInterface {
    
    private static final long serialVersionUID = 1L;
    
    public MockReportServer() throws RemoteException {
        super();
    }
    
    @Override
    public ReportResult generateReport(String templateId, Map<String, String> parameters, 
                                     String outputFormat, boolean includeCharts) throws RemoteException {
        System.out.println("Generating report for template: " + templateId);
        System.out.println("Parameters: " + parameters);
        System.out.println("Output format: " + outputFormat);
        System.out.println("Include charts: " + includeCharts);
        
        ReportResult result = new ReportResult();
        
        // Mock a successful result
        if ("monthly-summary".equals(templateId)) {
            result.setSuccess(true);
            result.setReportMimeType("application/pdf");
            result.setReportFilename("Monthly_Summary_Report.pdf");
            
            // Generate a simple PDF report content (just sample data)
            String content = "Monthly Summary Report\n\n";
            content += "Parameters:\n";
            for (Map.Entry<String, String> entry : parameters.entrySet()) {
                content += entry.getKey() + ": " + entry.getValue() + "\n";
            }
            content += "\nThis is a sample report generated by the MockReportServer.";
            
            result.setReportData(content.getBytes());
        } else if ("sales-analysis".equals(templateId)) {
            result.setSuccess(true);
            result.setReportMimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            result.setReportFilename("Sales_Analysis.xlsx");
            
            // Mock Excel data (just a placeholder)
            byte[] dummyExcelData = new byte[1024];
            for (int i = 0; i < dummyExcelData.length; i++) {
                dummyExcelData[i] = (byte)(i % 256);
            }
            result.setReportData(dummyExcelData);
        } else {
            result.setSuccess(false);
            result.setErrorMessage("Unknown template ID: " + templateId);
        }
        
        return result;
    }
    
    @Override
    public List<ReportTemplate> getAvailableReportTemplates() throws RemoteException {
        System.out.println("Getting available report templates");
        
        List<ReportTemplate> templates = new ArrayList<>();
        
        // Monthly Summary Report template
        ReportTemplate monthlySummary = new ReportTemplate();
        monthlySummary.setId("monthly-summary");
        monthlySummary.setName("Monthly Summary Report");
        monthlySummary.setDescription("A comprehensive summary of monthly business activities");
        
        // Parameters for Monthly Summary
        List<ParameterDefinition> monthlySummaryParams = new ArrayList<>();
        
        ParameterDefinition monthParam = new ParameterDefinition();
        monthParam.setName("month");
        monthParam.setDescription("Month (1-12 or name)");
        monthParam.setType("String");
        monthParam.setRequired(true);
        
        ParameterDefinition yearParam = new ParameterDefinition();
        yearParam.setName("year");
        yearParam.setDescription("Year (YYYY)");
        yearParam.setType("String");
        yearParam.setRequired(true);
        
        monthlySummaryParams.add(monthParam);
        monthlySummaryParams.add(yearParam);
        monthlySummary.setRequiredParameters(monthlySummaryParams);
        
        // Supported formats
        List<String> monthlySummaryFormats = new ArrayList<>();
        monthlySummaryFormats.add("PDF");
        monthlySummaryFormats.add("HTML");
        monthlySummary.setSupportedFormats(monthlySummaryFormats);
        
        // Sales Analysis Report template
        ReportTemplate salesAnalysis = new ReportTemplate();
        salesAnalysis.setId("sales-analysis");
        salesAnalysis.setName("Sales Analysis Report");
        salesAnalysis.setDescription("Detailed analysis of sales performance by product and region");
        
        // Parameters for Sales Analysis
        List<ParameterDefinition> salesAnalysisParams = new ArrayList<>();
        
        ParameterDefinition startDateParam = new ParameterDefinition();
        startDateParam.setName("startDate");
        startDateParam.setDescription("Start date (YYYY-MM-DD)");
        startDateParam.setType("Date");
        startDateParam.setRequired(true);
        
        ParameterDefinition endDateParam = new ParameterDefinition();
        endDateParam.setName("endDate");
        endDateParam.setDescription("End date (YYYY-MM-DD)");
        endDateParam.setType("Date");
        endDateParam.setRequired(true);
        
        ParameterDefinition regionParam = new ParameterDefinition();
        regionParam.setName("region");
        regionParam.setDescription("Region (e.g., North, South, East, West, or All)");
        regionParam.setType("String");
        regionParam.setRequired(false);
        regionParam.setDefaultValue("All");
        
        salesAnalysisParams.add(startDateParam);
        salesAnalysisParams.add(endDateParam);
        salesAnalysisParams.add(regionParam);
        salesAnalysis.setRequiredParameters(salesAnalysisParams);
        
        // Supported formats
        List<String> salesAnalysisFormats = new ArrayList<>();
        salesAnalysisFormats.add("PDF");
        salesAnalysisFormats.add("XLSX");
        salesAnalysis.setSupportedFormats(salesAnalysisFormats);
        
        templates.add(monthlySummary);
        templates.add(salesAnalysis);
        
        return templates;
    }
    
    @Override
    public boolean checkHealth() throws RemoteException {
        System.out.println("Checking health");
        return true;
    }
    
    public static void main(String[] args) {
        try {
            // Set up the RMI registry on port 1099
            try {
                LocateRegistry.createRegistry(1099);
                System.out.println("RMI registry created on port 1099");
            } catch (RemoteException e) {
                System.out.println("RMI registry already exists on port 1099");
            }
            
            // Create and bind the MockReportServer
            MockReportServer server = new MockReportServer();
            Naming.rebind("//localhost:1099/ReportServer", server);
            
            System.out.println("MockReportServer bound to registry");
            System.out.println("Server ready at rmi://localhost:1099/ReportServer");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
