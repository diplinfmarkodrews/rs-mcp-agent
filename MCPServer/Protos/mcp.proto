syntax = "proto3";

option csharp_namespace = "MCPServer.Protos";

package mcp;

// Model Context Protocol service definition
service MCPService {
  // Sends a message to the model and gets a response
  rpc Chat (ChatRequest) returns (ChatResponse);
  
  // Stream-based chat where the model's response is streamed back
  rpc ChatStream (ChatRequest) returns (stream ChatResponseChunk);
  
  // Get embeddings for text
  rpc GetEmbeddings (EmbeddingRequest) returns (EmbeddingResponse);

  // Health check for the service
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse);
}

// Chat message role options
enum Role {
  SYSTEM = 0;
  USER = 1;
  ASSISTANT = 2;
  FUNCTION = 3;
  TOOL = 4;
}

// Individual chat message
message ChatMessage {
  Role role = 1;
  string content = 2;
  string name = 3; // Optional name, useful for functions/tools
}

// Request for a chat completion
message ChatRequest {
  repeated ChatMessage messages = 1;
  string model = 2;
  float temperature = 3;
  int32 max_tokens = 4;
  repeated string stop = 5;
  map<string, string> metadata = 6;
}

// Response from the chat completion
message ChatResponse {
  ChatMessage message = 1;
  string model = 2;
  map<string, string> metadata = 3;
  string finish_reason = 4;
}

// Chunked response for streaming
message ChatResponseChunk {
  string content_chunk = 1;
  bool is_final = 2;
  string model = 3;
  map<string, string> metadata = 4;
  string finish_reason = 5;
}

// Request for embeddings
message EmbeddingRequest {
  repeated string texts = 1;
  string model = 2;
  map<string, string> metadata = 3;
}

// Response with embeddings
message EmbeddingResponse {
  repeated Embedding embeddings = 1;
  string model = 2;
  map<string, string> metadata = 3;
}

// Individual embedding vector
message Embedding {
  repeated float vector = 1;
  int32 index = 2;
}

// Health check request
message HealthCheckRequest {
  string service = 1;
}

// Health check response
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
}
